"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var canvasImage_1 = __importDefault(require("./src/lib/canvasImage"));
var utils_1 = require("@check-light-or-dark/utils");
function filterBrightness(imageData) {
    var _imageData = imageData;
    var pixels = imageData.length;
    var brightnessArr = [];
    for (var idx = 0; idx < pixels; idx += 4) {
        var r = _imageData[idx + 0];
        var g = _imageData[idx + 1];
        var b = _imageData[idx + 2];
        // const a = (_imageData[idx + 3] / 255);
        brightnessArr.push(utils_1.getBrightness(
        // @Notice: rgbaToRgb 로직 잠시 보류
        // rgbaToRgb(r, g, b, a)
        { r: r, g: g, b: b }));
    }
    return brightnessArr;
}
function checkLightOrDark(brightnessArr) {
    var lightCnt = 0;
    var darkCnt = 0;
    brightnessArr.forEach(function (b) {
        var isLight = b > utils_1.BRIGHTNESS_DEGREE;
        isLight
            ? lightCnt += 1
            : darkCnt += 1;
    });
    if (lightCnt === darkCnt) {
        return 'neutral';
    }
    return lightCnt > darkCnt
        ? 'light'
        : 'dark';
}
function lightOrDark(_a) {
    var image = _a.image, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    return __awaiter(this, void 0, void 0, function () {
        var canvasImage, imageData, brightnessArr;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!image) {
                        return [2 /*return*/, null];
                    }
                    canvasImage = new canvasImage_1.default(image);
                    return [4 /*yield*/, canvasImage.getImageData({
                            x: x,
                            y: y,
                            width: width,
                            height: height
                        })];
                case 1:
                    imageData = (_b.sent()).data;
                    brightnessArr = filterBrightness(imageData);
                    return [2 /*return*/, checkLightOrDark(brightnessArr)];
            }
        });
    });
}
exports.default = lightOrDark;
